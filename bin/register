#!/usr/bin/python3

import sys
import os
import socket
import re

from utilities import *


def usage ():
    print('Usage: register NODE', file=sys.stderr)
    print('   Create and register a node.', file=sys.stderr)
    node_usage()
    exit(1)



if len(sys.argv) != 2:
    print('Incorrect number of arguments.', file=sys.stderr)
    usage()


if not os.path.exists(os.path.join(SYSDISTRIBUTED, 'key')):
    print("Generating public/private keypair.")
    execute('ssh-keygen',
        '-t', 'rsa',
        '-b', '2048',
        '-f', os.path.join(SYSDISTRIBUTED, 'key'),
        '-N', '').wait()


node = sys.argv[1]

print("Attempting to register %s..." % node, end='', flush=True)

address = decode_node(node)
if not address:
    print('Invalid node address.', file=sys.stderr)
    usage()
user, host, port, directory = address


def ensure (truth, message = None):
    if not truth:
        print('failure!')
        if message != None:
            print(message)
        exit(1)


# Check if the server is reachable and is running ssh on this port.
# Obviously, the server could go down between this check and any of the
# subsequent steps, but this check should solve the majority of problems
# and give useful diagnostics (i.e. by identifying the reason subsequent
# steps would fail).
sock = socket.socket()
sock.settimeout(10)
try:
    sock.connect((host, int(port)))
    ensure(
        sock.recv(100).lower().startswith(b'ssh'),
        "Not an ssh server."
    )
except socket.timeout:
    ensure(False, "Remote server unreachable.")
except socket.gaierror:
    ensure(False, "Could not find address associated with hostname.")
finally:
    sock.close()
print('.', end='', flush=True)


if not test_ssh(user, host, port):
    ensure(
        execute('ssh',
            '-p', str(port),
            '%s@%s' % (user, host),
            "sh -c '"
                "cat >>~/.ssh/authorized_keys"
            "'",
            stdin=open(os.path.join(SYSDISTRIBUTED, 'key.pub'))
        ).wait() == 0,
        "Failed to register key with the remote server."
    )
    print('.', end='', flush=True)
    ensure(
        test_ssh(user, host, port),
        "Key registration with the remote server did not work."
    )
    print('.', end='', flush=True)
else:
    print('..', end='', flush=True)


ensure(
    remote_execute(user, host, port,
        'mkdir -p "%s"' % directory
    ),
    "Could not create directory on new node."
)
print('.', end='', flush=True)



localtar = execute('tar', '-pcz', '--null', '-T',
    '/dev/stdin', '-C', SYSDISTRIBUTED,
    stdin=PIPE, stdout=PIPE)
remotetar = execute('run-node', node, "tar -pxz", stdin=localtar.stdout)

localtar.stdin.write(b'key\0')
localtar.stdin.write(b'key.pub\0')
localtar.stdin.write(b'sysdistributed\0')
files = os.listdir(os.path.join(SYSDISTRIBUTED, 'bin'))
files = (fname for fname in files if re.match(r'^[a-zA-Z\-]+$', fname) != None)
for fname in files:
    localtar.stdin.write(('bin/%s\0' % fname).encode('utf-8'))
localtar.stdin.close()
ensure(
    localtar.wait() == 0,
    "Could not compress and send files."
)
ensure(
    remotetar.wait() == 0,
    "Remote could not receive and decompress sent files."
)
print('.', end='', flush=True)



ensure(
    execute('run-node', node, "echo %s >self" % node).wait() == 0,
    "Failed to tell node who it is."
)
print('.', end='', flush=True)



# Append node to list of nodes, and copy node list to other node.
with open(os.path.join(SYSDISTRIBUTED, 'nodes'), 'ab') as f:
    f.write(("%s\n" % node).encode('utf-8'))
print('.', end='', flush=True)
# TODO: Check if node is already in this list?

# TODO: Tell other nodes about new node?

print("success!")
exit(0)


